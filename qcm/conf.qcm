/*
-----BEGIN QCMOD-----
name: Psi Configuration
-----END QCMOD-----
*/

#include <QDateTime>

static QString psiGetVersion()
{
    QString str;

    {
        QFile file(sourceDir + "/version");
        if (file.open(QIODevice::ReadOnly | QIODevice::Text)) {
            QTextStream ts(&file);
            if (!ts.atEnd())
                str = ts.readLine();
        }

        if (str.isEmpty())
            str = "UnknownVersion";
    }

    QString nowstr = QDateTime::currentDateTime().toString("yyyyMMdd");
    str.replace("@@DATE@@", nowstr);
    return str;
}

class qc_conf : public ConfObj {
public:
    qc_conf(Conf *c) : ConfObj(c) {}
    QString name() const { return qc_psiplus ? "Psi+ Configuration" : "Psi Configuration"; }
    QString shortname() const { return "conf"; }
    QString checkString() const { return QString(); }
    bool    exec()
    {
        QString version = psiGetVersion();
        QRegExp verre("^\\d+(?:\\.\\d+)+");
        if (verre.indexIn(version) == -1) {
            conf->debug("Failed to parse version file");
            return false;
        }
        conf->addExtra(QString("PSI_VERSION = %1").arg(verre.cap(0)));

        QHash<QString, QString> vars;
        vars["VERSION"] = version;
        QDir::current().mkpath("mac");
        psiGenerateFile(sourceDir + "/mac/Info.plist.in", "mac/Info.plist", vars);

        vars.clear();
        vars["source_dir"] = sourceDir;
        vars["build_dir"]  = QDir::currentPath();
        psiGenerateFile(sourceDir + "/.qmake.cache.in", ".qmake.cache", vars);

#ifndef Q_OS_WIN
        conf->addExtra(QString("PSI_LIBDIR=%1/%2").arg(conf->getenv("LIBDIR"), qc_psi_dir_name));
        conf->addExtra(QString("PSI_DATADIR=%1/%2").arg(conf->getenv("DATADIR"), qc_psi_dir_name));
#endif

        QDir(".").mkdir("src");
        auto now = QDateTime::currentDateTime();
        vars     = {
            { "CLIENT_NAME", qc_psiplus ? "Psi+" : "Psi" },
            { "CLIENT_SNAME", qc_psiplus ? "psi+" : "psi" },
            { "CLIENT_CAPS_NODE", qc_psiplus ? "https://psi-plus.com" : "https://psi-im.org" },
            { "PRODUCTION", "" },
#ifndef Q_OS_WIN
            { "PSI_LIBDIR", conf->getenv("LIBDIR") + "/" + qc_psi_dir_name },
            { "PSI_DATADIR", conf->getenv("DATADIR") + "/" + qc_psi_dir_name },
#endif
            { "PSI_VERSION", version },
            { "PSI_REVISION", "" },
            { "PSI_PLUS_REVISION", "" },
            { "PSI_COMPILATION_DATE", now.toString("yyyy-MM-dd") },
            { "PSI_COMPILATION_TIME", now.toString("HH:mm:ss") },
        };
        psiGenerateFile(sourceDir + "/src/config.h.in", "src/config.h", vars);

        vars = { { "PSILOGO_PREFIX", qc_psiplus ? "psiplus/" : "" },
                 { "MAIN_ICON", qc_psiplus ? "psiplus_icon.png" : "psimain.png" } };

        auto buildIconDir = QDir::current().absoluteFilePath("iconsets");
        copyPath(sourceDir + "/iconsets", buildIconDir);
        psiGenerateFile(sourceDir + "/iconsets.qrc.in", "iconsets.qrc", vars);
        psiGenerateFile(sourceDir + "/icondef.xml.in", buildIconDir + "/system/default/icondef.xml", vars);

        conf->addDefine("HAVE_CONFIG");

        return true;
    }
};
